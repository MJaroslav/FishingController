buildscript {
    repositories {
        mavenCentral()
        maven {
            name 'forge'
            url 'https://maven.minecraftforge.net'
        }
    }
    dependencies {
        classpath('com.anatawa12.forge:ForgeGradle:1.2-1.0.+') {
            changing = true
        }
    }
}


apply plugin: 'java'
apply plugin: 'forge'
apply from: 'https://raw.githubusercontent.com/tox1cozZ/mixin-booter-legacy/master/gradle/configurations/v1.gradle'
apply from: 'https://raw.githubusercontent.com/MJaroslav/MCInGameTester/master/gradle/configurations/v1.gradle'

repositories {
    mavenCentral()
    maven {
        name 'jitpack'
        url 'https://jitpack.io'
    }
    maven {
        name "Gregtech repo"
        url 'https://gregtech.overminddl1.com'
    }
}

def buildprop = new Properties()
file("build.properties").withInputStream { buildprop.load(it) }

version = buildprop.version
group = buildprop.group
archivesBaseName = project.name

task devJar(type: Jar) {
    classifier('dev')
    manifest { from project.tasks.jar.manifest }
    from sourceSets.main.output
}

artifacts {
    archives devJar
}

java {
    withSourcesJar()
}

configure([tasks.compileJava, tasks.compileTestJava, tasks.compileApiJava]) {
    sourceCompatibility = 16 // for the IDE support
    options.release = 8

    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(16)
    }
}

configurations {
    shade

    implementation.extendsFrom(shade)
}

minecraft {
    version = "${buildprop.game_version}-${buildprop.forge_version}-${buildprop.game_version}"
    runDir = buildprop.run_dir
    replace '@VERSION@', project.version
    srgExtra "PK: blue/endless/jankson com/github/mjaroslav/mjutils/library/blue/endless/jankson"
}

mixin {
    mixinRefMapName = "mixin.${project.name.replace(" ", "").toLowerCase()}.refmap.json"
}

dependencies {
    shade "blue.endless:jankson:${buildprop.jankson_version}"

    // All mods versions hardcoded because it's 1.7.10, my dude
    implementation "codechicken:CodeChickenLib:1.7.10-1.1.3.140:dev"
    implementation "codechicken:CodeChickenCore:1.7.10-1.0.7.47:dev"
    implementation "codechicken:NotEnoughItems:1.7.10-1.0.5.120:dev"
    implementation "mcp.mobius.waila:Waila:1.5.11-RC2-NONEI_1.7.10:dev"
    compileOnly "com.azanor.baubles:Baubles:1.7.10-1.0.1.10:deobf"
    compileOnly "thaumcraft:Thaumcraft:1.7.10-4.2.3.5:dev"

    testCompileOnly "com.azanor.baubles:Baubles:1.7.10-1.0.1.10:deobf"
    testCompileOnly "thaumcraft:Thaumcraft:1.7.10-4.2.3.5:dev"

    compileOnly "org.jetbrains:annotations:${buildprop.jetbrains_annotations_version}"
    testCompileOnly "org.jetbrains:annotations:${buildprop.jetbrains_annotations_version}"

    compileOnly "org.projectlombok:lombok:${buildprop.lombok_version}"
    annotationProcessor "org.projectlombok:lombok:${buildprop.lombok_version}"

    testCompileOnly "org.projectlombok:lombok:${buildprop.lombok_version}"
    testAnnotationProcessor "org.projectlombok:lombok:${buildprop.lombok_version}"

	annotationProcessor "com.github.bsideup.jabel:jabel-javac-plugin:${buildprop.jabel_version}"
    testAnnotationProcessor "com.github.bsideup.jabel:jabel-javac-plugin:${buildprop.jabel_version}"

    testImplementation "junit:junit:${buildprop.junit_version}"
}

test {
    useJUnit()
}

processResources {
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': project.minecraft.version
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
}

jar {
    if (buildprop.coremod.toBoolean())
        manifest {
            // TODO: Don't forged about -Dfml.coreMods.load
            attributes "FMLCorePlugin": "${project.group}.${project.name.replace(" ", "").toLowerCase()}" +
                    ".asm.${project.name.replace(" ", "")}Plugin"
            attributes "FMLCorePluginContainsFMLMod": "true"
        }
    configurations.shade.each { dep ->
        from project.zipTree(dep)
    }
}

//
// wtf why reobf leaves empty dirs in jar after package relocation
//
task prepareToFuckEmptyDirs(type: Copy, dependsOn: 'reobf') {
    from tasks.jar.archiveFile
    into new File(buildDir, "tmp/fuckEmptyDirs/")
}

task fuckEmptyDirs(type: Jar, dependsOn: 'prepareToFuckEmptyDirs') {
    from(zipTree(new File(buildDir, "tmp/fuckEmptyDirs/${tasks.jar.archiveName}")))
    includeEmptyDirs = false
}

tasks.build.dependsOn(tasks.fuckEmptyDirs)
